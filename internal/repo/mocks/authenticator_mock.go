// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ferdiebergado/fullstackgo/internal/db (interfaces: Authenticator)
//
// Generated by this command:
//
//	mockgen -destination=mocks/authenticator_mock.go -package=mocks . Authenticator
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	model "github.com/ferdiebergado/fullstackgo/internal/model"
	gomock "go.uber.org/mock/gomock"
)

// MockAuthenticator is a mock of Authenticator interface.
type MockAuthenticator struct {
	ctrl     *gomock.Controller
	recorder *MockAuthenticatorMockRecorder
	isgomock struct{}
}

// MockAuthenticatorMockRecorder is the mock recorder for MockAuthenticator.
type MockAuthenticatorMockRecorder struct {
	mock *MockAuthenticator
}

// NewMockAuthenticator creates a new mock instance.
func NewMockAuthenticator(ctrl *gomock.Controller) *MockAuthenticator {
	mock := &MockAuthenticator{ctrl: ctrl}
	mock.recorder = &MockAuthenticatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthenticator) EXPECT() *MockAuthenticatorMockRecorder {
	return m.recorder
}

// SignInUser mocks base method.
func (m *MockAuthenticator) SignInUser(ctx context.Context, params model.UserSignInParams) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignInUser", ctx, params)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignInUser indicates an expected call of SignInUser.
func (mr *MockAuthenticatorMockRecorder) SignInUser(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignInUser", reflect.TypeOf((*MockAuthenticator)(nil).SignInUser), ctx, params)
}

// SignUpUser mocks base method.
func (m *MockAuthenticator) SignUpUser(ctx context.Context, params model.UserSignUpParams) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignUpUser", ctx, params)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignUpUser indicates an expected call of SignUpUser.
func (mr *MockAuthenticatorMockRecorder) SignUpUser(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUpUser", reflect.TypeOf((*MockAuthenticator)(nil).SignUpUser), ctx, params)
}
